/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as BrowserUse from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Files {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Files {
    protected readonly _options: Files.Options;

    constructor(_options: Files.Options) {
        this._options = _options;
    }

    /**
     * Generate a secure presigned URL for uploading files that AI agents can use during tasks.
     *
     * @param {string} sessionId
     * @param {BrowserUse.UploadFileRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.BadRequestError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     * @throws {@link BrowserUse.InternalServerError}
     *
     * @example
     *     await client.files.userUploadFilePresignedUrl("session_id", {
     *         fileName: "fileName",
     *         contentType: "image/jpg",
     *         sizeBytes: 1
     *     })
     */
    public userUploadFilePresignedUrl(
        sessionId: string,
        request: BrowserUse.UploadFileRequest,
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.UploadFilePresignedUrlResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__userUploadFilePresignedUrl(sessionId, request, requestOptions),
        );
    }

    private async __userUploadFilePresignedUrl(
        sessionId: string,
        request: BrowserUse.UploadFileRequest,
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.UploadFilePresignedUrlResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `files/sessions/${encodeURIComponent(sessionId)}/presigned-url`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as BrowserUse.UploadFilePresignedUrlResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BrowserUse.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new BrowserUse.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError(
                    "Timeout exceeded when calling POST /files/sessions/{session_id}/presigned-url.",
                );
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get secure download URL for a user uploaded file used in the task.
     *
     * @param {string} taskId
     * @param {string} fileId
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     * @throws {@link BrowserUse.InternalServerError}
     *
     * @example
     *     await client.files.getTaskUserUploadedFilePresignedUrl("task_id", "file_id")
     */
    public getTaskUserUploadedFilePresignedUrl(
        taskId: string,
        fileId: string,
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.TaskUploadedFileResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getTaskUserUploadedFilePresignedUrl(taskId, fileId, requestOptions),
        );
    }

    private async __getTaskUserUploadedFilePresignedUrl(
        taskId: string,
        fileId: string,
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.TaskUploadedFileResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `files/tasks/${encodeURIComponent(taskId)}/uploaded-files/${encodeURIComponent(fileId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.TaskUploadedFileResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new BrowserUse.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError(
                    "Timeout exceeded when calling GET /files/tasks/{task_id}/uploaded-files/{file_id}.",
                );
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get secure download URL for an output file generated by the AI agent.
     *
     * @param {string} taskId
     * @param {string} fileId
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     * @throws {@link BrowserUse.InternalServerError}
     *
     * @example
     *     await client.files.getTaskOutputFilePresignedUrl("task_id", "file_id")
     */
    public getTaskOutputFilePresignedUrl(
        taskId: string,
        fileId: string,
        requestOptions?: Files.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.TaskOutputFileResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__getTaskOutputFilePresignedUrl(taskId, fileId, requestOptions),
        );
    }

    private async __getTaskOutputFilePresignedUrl(
        taskId: string,
        fileId: string,
        requestOptions?: Files.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.TaskOutputFileResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `files/tasks/${encodeURIComponent(taskId)}/output-files/${encodeURIComponent(fileId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.TaskOutputFileResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new BrowserUse.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError(
                    "Timeout exceeded when calling GET /files/tasks/{task_id}/output-files/{file_id}.",
                );
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Browser-Use-API-Key": apiKeyValue };
    }
}
