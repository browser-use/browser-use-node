/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as BrowserUse from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Tasks {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Tasks {
    protected readonly _options: Tasks.Options;

    constructor(_options: Tasks.Options) {
        this._options = _options;
    }

    /**
     * Get paginated list of AI agent tasks with optional filtering by session and status.
     *
     * @param {BrowserUse.ListTasksTasksGetRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.tasks.listTasks()
     */
    public listTasks(
        request: BrowserUse.ListTasksTasksGetRequest = {},
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.TaskListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listTasks(request, requestOptions));
    }

    private async __listTasks(
        request: BrowserUse.ListTasksTasksGetRequest = {},
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.TaskListResponse>> {
        const { pageSize, pageNumber, sessionId, filterBy, after, before } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams["pageSize"] = pageSize.toString();
        }

        if (pageNumber != null) {
            _queryParams["pageNumber"] = pageNumber.toString();
        }

        if (sessionId != null) {
            _queryParams["sessionId"] = sessionId;
        }

        if (filterBy != null) {
            _queryParams["filterBy"] = filterBy;
        }

        if (after != null) {
            _queryParams["after"] = after;
        }

        if (before != null) {
            _queryParams["before"] = before;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "tasks",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.TaskListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling GET /tasks.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * You can either:
     * 1. Start a new task (auto creates a new simple session)
     * 2. Start a new task in an existing session (you can create a custom session before starting the task and reuse it for follow-up tasks)
     *
     * @param {BrowserUse.CreateTaskRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.BadRequestError}
     * @throws {@link BrowserUse.PaymentRequiredError}
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     * @throws {@link BrowserUse.InternalServerError}
     *
     * @example
     *     await client.tasks.createTask({
     *         task: "task"
     *     })
     */
    public createTask(
        request: BrowserUse.CreateTaskRequest,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.TaskCreatedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createTask(request, requestOptions));
    }

    private async __createTask(
        request: BrowserUse.CreateTaskRequest,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.TaskCreatedResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "tasks",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.TaskCreatedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BrowserUse.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 402:
                    throw new BrowserUse.PaymentRequiredError(
                        _response.error.body as BrowserUse.InsufficientCreditsError,
                        _response.rawResponse,
                    );
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new BrowserUse.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling POST /tasks.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get detailed task information including status, progress, steps, and file outputs.
     *
     * @param {string} taskId
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.tasks.getTask("task_id")
     */
    public getTask(
        taskId: string,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.TaskView> {
        return core.HttpResponsePromise.fromPromise(this.__getTask(taskId, requestOptions));
    }

    private async __getTask(
        taskId: string,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.TaskView>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `tasks/${encodeURIComponent(taskId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.TaskView, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling GET /tasks/{task_id}.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Control task execution with stop, pause, resume, or stop task and session actions.
     *
     * @param {string} taskId
     * @param {BrowserUse.UpdateTaskRequest} request
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.tasks.updateTask("task_id", {
     *         action: "stop"
     *     })
     */
    public updateTask(
        taskId: string,
        request: BrowserUse.UpdateTaskRequest,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.TaskView> {
        return core.HttpResponsePromise.fromPromise(this.__updateTask(taskId, request, requestOptions));
    }

    private async __updateTask(
        taskId: string,
        request: BrowserUse.UpdateTaskRequest,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.TaskView>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `tasks/${encodeURIComponent(taskId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.TaskView, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling PATCH /tasks/{task_id}.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get secure download URL for task execution logs with step-by-step details.
     *
     * @param {string} taskId
     * @param {Tasks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     * @throws {@link BrowserUse.InternalServerError}
     *
     * @example
     *     await client.tasks.getTaskLogs("task_id")
     */
    public getTaskLogs(
        taskId: string,
        requestOptions?: Tasks.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.TaskLogFileResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getTaskLogs(taskId, requestOptions));
    }

    private async __getTaskLogs(
        taskId: string,
        requestOptions?: Tasks.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.TaskLogFileResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `tasks/${encodeURIComponent(taskId)}/logs`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.TaskLogFileResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                case 500:
                    throw new BrowserUse.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling GET /tasks/{task_id}/logs.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Browser-Use-API-Key": apiKeyValue };
    }
}
