/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as BrowserUse from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Sessions {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Sessions {
    protected readonly _options: Sessions.Options;

    constructor(_options: Sessions.Options) {
        this._options = _options;
    }

    /**
     * Get paginated list of AI agent sessions with optional status filtering.
     *
     * @param {BrowserUse.ListSessionsSessionsGetRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.listSessions()
     */
    public listSessions(
        request: BrowserUse.ListSessionsSessionsGetRequest = {},
        requestOptions?: Sessions.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.SessionListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listSessions(request, requestOptions));
    }

    private async __listSessions(
        request: BrowserUse.ListSessionsSessionsGetRequest = {},
        requestOptions?: Sessions.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.SessionListResponse>> {
        const { pageSize, pageNumber, filterBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams["pageSize"] = pageSize.toString();
        }

        if (pageNumber != null) {
            _queryParams["pageNumber"] = pageNumber.toString();
        }

        if (filterBy != null) {
            _queryParams["filterBy"] = filterBy;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "sessions",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.SessionListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling GET /sessions.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get detailed session information including status, URLs, and task details.
     *
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.getSession("session_id")
     */
    public getSession(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.SessionView> {
        return core.HttpResponsePromise.fromPromise(this.__getSession(sessionId, requestOptions));
    }

    private async __getSession(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.SessionView>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `sessions/${encodeURIComponent(sessionId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.SessionView, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling GET /sessions/{session_id}.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Permanently delete a session and all associated data.
     *
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.deleteSession("session_id")
     */
    public deleteSession(sessionId: string, requestOptions?: Sessions.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteSession(sessionId, requestOptions));
    }

    private async __deleteSession(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `sessions/${encodeURIComponent(sessionId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling DELETE /sessions/{session_id}.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Stop a session and all its running tasks.
     *
     * @param {string} sessionId
     * @param {BrowserUse.UpdateSessionRequest} request
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.updateSession("session_id", {})
     */
    public updateSession(
        sessionId: string,
        request: BrowserUse.UpdateSessionRequest,
        requestOptions?: Sessions.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.SessionView> {
        return core.HttpResponsePromise.fromPromise(this.__updateSession(sessionId, request, requestOptions));
    }

    private async __updateSession(
        sessionId: string,
        request: BrowserUse.UpdateSessionRequest,
        requestOptions?: Sessions.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.SessionView>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `sessions/${encodeURIComponent(sessionId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: { ...request, action: "stop" },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.SessionView, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError("Timeout exceeded when calling PATCH /sessions/{session_id}.");
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get public share information including URL and usage statistics.
     *
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.getSessionPublicShare("session_id")
     */
    public getSessionPublicShare(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.ShareView> {
        return core.HttpResponsePromise.fromPromise(this.__getSessionPublicShare(sessionId, requestOptions));
    }

    private async __getSessionPublicShare(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.ShareView>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `sessions/${encodeURIComponent(sessionId)}/public-share`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.ShareView, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError(
                    "Timeout exceeded when calling GET /sessions/{session_id}/public-share.",
                );
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create or return existing public share for a session.
     *
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.createSessionPublicShare("session_id")
     */
    public createSessionPublicShare(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): core.HttpResponsePromise<BrowserUse.ShareView> {
        return core.HttpResponsePromise.fromPromise(this.__createSessionPublicShare(sessionId, requestOptions));
    }

    private async __createSessionPublicShare(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): Promise<core.WithRawResponse<BrowserUse.ShareView>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `sessions/${encodeURIComponent(sessionId)}/public-share`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as BrowserUse.ShareView, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError(
                    "Timeout exceeded when calling POST /sessions/{session_id}/public-share.",
                );
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Remove public share for a session.
     *
     * @param {string} sessionId
     * @param {Sessions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BrowserUse.NotFoundError}
     * @throws {@link BrowserUse.UnprocessableEntityError}
     *
     * @example
     *     await client.sessions.deleteSessionPublicShare("session_id")
     */
    public deleteSessionPublicShare(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteSessionPublicShare(sessionId, requestOptions));
    }

    private async __deleteSessionPublicShare(
        sessionId: string,
        requestOptions?: Sessions.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `sessions/${encodeURIComponent(sessionId)}/public-share`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new BrowserUse.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 422:
                    throw new BrowserUse.UnprocessableEntityError(
                        _response.error.body as unknown,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.BrowserUseError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BrowserUseError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.BrowserUseTimeoutError(
                    "Timeout exceeded when calling DELETE /sessions/{session_id}/public-share.",
                );
            case "unknown":
                throw new errors.BrowserUseError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-Browser-Use-API-Key": apiKeyValue };
    }
}
