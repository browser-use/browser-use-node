/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BrowserUseClient } from "../../src/Client";

describe("Sessions", () => {
    test("listSessions", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                {
                    id: "id",
                    status: "active",
                    liveUrl: "liveUrl",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                },
            ],
            totalItems: 1,
            pageNumber: 1,
            pageSize: 1,
        };
        server.mockEndpoint().get("/sessions").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.sessions.listSessions();
        expect(response).toEqual({
            items: [
                {
                    id: "id",
                    status: "active",
                    liveUrl: "liveUrl",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                },
            ],
            totalItems: 1,
            pageNumber: 1,
            pageSize: 1,
        });
    });

    test("createSession", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            status: "active",
            liveUrl: "liveUrl",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            tasks: [
                {
                    id: "id",
                    sessionId: "sessionId",
                    llm: "llm",
                    task: "task",
                    status: "started",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                    metadata: { key: "value" },
                    isScheduled: true,
                    output: "output",
                    browserUseVersion: "browserUseVersion",
                    isSuccess: true,
                },
            ],
            publicShareUrl: "publicShareUrl",
        };
        server
            .mockEndpoint()
            .post("/sessions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sessions.createSession();
        expect(response).toEqual({
            id: "id",
            status: "active",
            liveUrl: "liveUrl",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            tasks: [
                {
                    id: "id",
                    sessionId: "sessionId",
                    llm: "llm",
                    task: "task",
                    status: "started",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                    metadata: {
                        key: "value",
                    },
                    isScheduled: true,
                    output: "output",
                    browserUseVersion: "browserUseVersion",
                    isSuccess: true,
                },
            ],
            publicShareUrl: "publicShareUrl",
        });
    });

    test("getSession", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            status: "active",
            liveUrl: "liveUrl",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            tasks: [
                {
                    id: "id",
                    sessionId: "sessionId",
                    llm: "llm",
                    task: "task",
                    status: "started",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                    metadata: { key: "value" },
                    isScheduled: true,
                    output: "output",
                    browserUseVersion: "browserUseVersion",
                    isSuccess: true,
                },
            ],
            publicShareUrl: "publicShareUrl",
        };
        server
            .mockEndpoint()
            .get("/sessions/session_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sessions.getSession("session_id");
        expect(response).toEqual({
            id: "id",
            status: "active",
            liveUrl: "liveUrl",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            tasks: [
                {
                    id: "id",
                    sessionId: "sessionId",
                    llm: "llm",
                    task: "task",
                    status: "started",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                    metadata: {
                        key: "value",
                    },
                    isScheduled: true,
                    output: "output",
                    browserUseVersion: "browserUseVersion",
                    isSuccess: true,
                },
            ],
            publicShareUrl: "publicShareUrl",
        });
    });

    test("deleteSession", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/sessions/session_id").respondWith().statusCode(200).build();

        const response = await client.sessions.deleteSession("session_id");
        expect(response).toEqual(undefined);
    });

    test("updateSession", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { action: "stop" };
        const rawResponseBody = {
            id: "id",
            status: "active",
            liveUrl: "liveUrl",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            tasks: [
                {
                    id: "id",
                    sessionId: "sessionId",
                    llm: "llm",
                    task: "task",
                    status: "started",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                    metadata: { key: "value" },
                    isScheduled: true,
                    output: "output",
                    browserUseVersion: "browserUseVersion",
                    isSuccess: true,
                },
            ],
            publicShareUrl: "publicShareUrl",
        };
        server
            .mockEndpoint()
            .patch("/sessions/session_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sessions.updateSession("session_id", {});
        expect(response).toEqual({
            id: "id",
            status: "active",
            liveUrl: "liveUrl",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            tasks: [
                {
                    id: "id",
                    sessionId: "sessionId",
                    llm: "llm",
                    task: "task",
                    status: "started",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                    metadata: {
                        key: "value",
                    },
                    isScheduled: true,
                    output: "output",
                    browserUseVersion: "browserUseVersion",
                    isSuccess: true,
                },
            ],
            publicShareUrl: "publicShareUrl",
        });
    });

    test("getSessionPublicShare", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            shareToken: "shareToken",
            shareUrl: "shareUrl",
            viewCount: 1,
            lastViewedAt: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/sessions/session_id/public-share")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sessions.getSessionPublicShare("session_id");
        expect(response).toEqual({
            shareToken: "shareToken",
            shareUrl: "shareUrl",
            viewCount: 1,
            lastViewedAt: "2024-01-15T09:30:00Z",
        });
    });

    test("createSessionPublicShare", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            shareToken: "shareToken",
            shareUrl: "shareUrl",
            viewCount: 1,
            lastViewedAt: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/sessions/session_id/public-share")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sessions.createSessionPublicShare("session_id");
        expect(response).toEqual({
            shareToken: "shareToken",
            shareUrl: "shareUrl",
            viewCount: 1,
            lastViewedAt: "2024-01-15T09:30:00Z",
        });
    });

    test("deleteSessionPublicShare", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/sessions/session_id/public-share").respondWith().statusCode(200).build();

        const response = await client.sessions.deleteSessionPublicShare("session_id");
        expect(response).toEqual(undefined);
    });
});
