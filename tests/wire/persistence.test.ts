/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BrowserUseClient } from "../../src/Client";

describe("Persistence", () => {
    test("listPersistenceProfiles", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                {
                    id: "id",
                    lastUsedAt: "2024-01-15T09:30:00Z",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            totalItems: 1,
            pageNumber: 1,
            pageSize: 1,
        };
        server.mockEndpoint().get("/persistence").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.persistence.listPersistenceProfiles();
        expect(response).toEqual({
            items: [
                {
                    id: "id",
                    lastUsedAt: "2024-01-15T09:30:00Z",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                },
            ],
            totalItems: 1,
            pageNumber: 1,
            pageSize: 1,
        });
    });

    test("createPersistenceProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            lastUsedAt: "2024-01-15T09:30:00Z",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        };
        server.mockEndpoint().post("/persistence").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.persistence.createPersistenceProfile();
        expect(response).toEqual({
            id: "id",
            lastUsedAt: "2024-01-15T09:30:00Z",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        });
    });

    test("getPersistenceProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            lastUsedAt: "2024-01-15T09:30:00Z",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/persistence/persistence_profile_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.persistence.getPersistenceProfile("persistence_profile_id");
        expect(response).toEqual({
            id: "id",
            lastUsedAt: "2024-01-15T09:30:00Z",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
        });
    });

    test("deleteBrowserProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/persistence/profile_id").respondWith().statusCode(200).build();

        const response = await client.persistence.deleteBrowserProfile("profile_id");
        expect(response).toEqual(undefined);
    });
});
