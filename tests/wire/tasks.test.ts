/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BrowserUseClient } from "../../src/Client";

describe("Tasks", () => {
    test("listTasks", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            items: [
                {
                    id: "id",
                    sessionId: "sessionId",
                    llm: "llm",
                    task: "task",
                    status: "started",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                    metadata: { key: "value" },
                    output: "output",
                    browserUseVersion: "browserUseVersion",
                    isSuccess: true,
                },
            ],
            totalItems: 1,
            pageNumber: 1,
            pageSize: 1,
        };
        server.mockEndpoint().get("/tasks").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tasks.listTasks();
        expect(response).toEqual({
            items: [
                {
                    id: "id",
                    sessionId: "sessionId",
                    llm: "llm",
                    task: "task",
                    status: "started",
                    startedAt: "2024-01-15T09:30:00Z",
                    finishedAt: "2024-01-15T09:30:00Z",
                    metadata: {
                        key: "value",
                    },
                    output: "output",
                    browserUseVersion: "browserUseVersion",
                    isSuccess: true,
                },
            ],
            totalItems: 1,
            pageNumber: 1,
            pageSize: 1,
        });
    });

    test("createTask", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { task: "task" };
        const rawResponseBody = { id: "id" };
        server
            .mockEndpoint()
            .post("/tasks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tasks.createTask({
            task: "task",
        });
        expect(response).toEqual({
            id: "id",
        });
    });

    test("getTask", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            sessionId: "sessionId",
            llm: "llm",
            task: "task",
            status: "started",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            metadata: { key: "value" },
            steps: [
                {
                    number: 1,
                    memory: "memory",
                    evaluationPreviousGoal: "evaluationPreviousGoal",
                    nextGoal: "nextGoal",
                    url: "url",
                    screenshotUrl: "screenshotUrl",
                    actions: ["actions"],
                },
            ],
            output: "output",
            outputFiles: [{ id: "id", fileName: "fileName" }],
            browserUseVersion: "browserUseVersion",
            isSuccess: true,
        };
        server.mockEndpoint().get("/tasks/task_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tasks.getTask("task_id");
        expect(response).toEqual({
            id: "id",
            sessionId: "sessionId",
            llm: "llm",
            task: "task",
            status: "started",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            metadata: {
                key: "value",
            },
            steps: [
                {
                    number: 1,
                    memory: "memory",
                    evaluationPreviousGoal: "evaluationPreviousGoal",
                    nextGoal: "nextGoal",
                    url: "url",
                    screenshotUrl: "screenshotUrl",
                    actions: ["actions"],
                },
            ],
            output: "output",
            outputFiles: [
                {
                    id: "id",
                    fileName: "fileName",
                },
            ],
            browserUseVersion: "browserUseVersion",
            isSuccess: true,
        });
    });

    test("updateTask", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { action: "stop" };
        const rawResponseBody = {
            id: "id",
            sessionId: "sessionId",
            llm: "llm",
            task: "task",
            status: "started",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            metadata: { key: "value" },
            steps: [
                {
                    number: 1,
                    memory: "memory",
                    evaluationPreviousGoal: "evaluationPreviousGoal",
                    nextGoal: "nextGoal",
                    url: "url",
                    screenshotUrl: "screenshotUrl",
                    actions: ["actions"],
                },
            ],
            output: "output",
            outputFiles: [{ id: "id", fileName: "fileName" }],
            browserUseVersion: "browserUseVersion",
            isSuccess: true,
        };
        server
            .mockEndpoint()
            .patch("/tasks/task_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tasks.updateTask("task_id", {
            action: "stop",
        });
        expect(response).toEqual({
            id: "id",
            sessionId: "sessionId",
            llm: "llm",
            task: "task",
            status: "started",
            startedAt: "2024-01-15T09:30:00Z",
            finishedAt: "2024-01-15T09:30:00Z",
            metadata: {
                key: "value",
            },
            steps: [
                {
                    number: 1,
                    memory: "memory",
                    evaluationPreviousGoal: "evaluationPreviousGoal",
                    nextGoal: "nextGoal",
                    url: "url",
                    screenshotUrl: "screenshotUrl",
                    actions: ["actions"],
                },
            ],
            output: "output",
            outputFiles: [
                {
                    id: "id",
                    fileName: "fileName",
                },
            ],
            browserUseVersion: "browserUseVersion",
            isSuccess: true,
        });
    });

    test("getTaskLogs", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { downloadUrl: "downloadUrl" };
        server
            .mockEndpoint()
            .get("/tasks/task_id/logs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tasks.getTaskLogs("task_id");
        expect(response).toEqual({
            downloadUrl: "downloadUrl",
        });
    });
});
