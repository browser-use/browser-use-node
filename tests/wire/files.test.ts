/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { BrowserUseClient } from "../../src/Client";

describe("Files", () => {
    test("userUploadFilePresignedUrl", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { fileName: "fileName", contentType: "image/jpg", sizeBytes: 1 };
        const rawResponseBody = {
            url: "url",
            method: "POST",
            fields: { key: "value" },
            fileName: "fileName",
            expiresIn: 1,
        };
        server
            .mockEndpoint()
            .post("/files/sessions/session_id/presigned-url")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.userUploadFilePresignedUrl("session_id", {
            fileName: "fileName",
            contentType: "image/jpg",
            sizeBytes: 1,
        });
        expect(response).toEqual({
            url: "url",
            method: "POST",
            fields: {
                key: "value",
            },
            fileName: "fileName",
            expiresIn: 1,
        });
    });

    test("getTaskOutputFilePresignedUrl", async () => {
        const server = mockServerPool.createServer();
        const client = new BrowserUseClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { id: "id", fileName: "fileName", downloadUrl: "downloadUrl" };
        server
            .mockEndpoint()
            .get("/files/tasks/task_id/output-files/file_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.files.getTaskOutputFilePresignedUrl("task_id", "file_id");
        expect(response).toEqual({
            id: "id",
            fileName: "fileName",
            downloadUrl: "downloadUrl",
        });
    });
});
